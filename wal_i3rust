#!/usr/bin/env python
"""Update i3status-rust theme colors
generated by pywal or by query xrdb
"""

import glob
import os
import json
import subprocess
import argparse

__author__ = "Jean LE QUELLEC"
__copyright__ = "Copyright 2020, PyWal i3status-rust"
__credits__ = ["Jean LE QUELLEC"]
__license__ = "MIT"
__version__ = "1.0.0"
__maintainer__ = "Jean LE QUELLEC"
__email__ = "Contact via Gitlab"
__status__ = "Production"


def main():

    # Dict of customizable colors in i3status-rust
    # If you want you can change wanted Xcolors here
    custom_colors = {   "idle_bg": 'color0',
                        "idle_fg": 'color15',
                        "info_bg": 'color15',
                        "info_fg": 'color0',
                        "good_bg": 'color4',
                        "good_fg": 'color15',
                        "warning_bg": 'color1',
                        "warning_fg": 'color0',
                        "critical_bg": 'color3',
                        "critical_fg": 'color15',
                        "alternating_tint_bg": 'color0',
                        "alternating_tint_fg": 'color0'}

    # read command args first
    parser = argparse.ArgumentParser(description="Update i3status-rust " +
                                                 "theme colors")

    parser.add_argument('-c', '--config', required=True,
                        help="Path to i3status-rust conf file")

    parser.add_argument('-i', '--input', required=False, metavar='N', type=str, nargs=1,
                        help="Path to pywal json scheme to apply")

    parser.add_argument('-x', '--xrdb', required=False, action='store_true',
                        help="use colors returned by xrdb")

    parser.add_argument('-b', '--backup', required=False, action='store_true',
                        help="Backup i3status-rust conf file")

    parser.add_argument('-d', '--delete', required=False, action='store_true',
                        help="Delete last generated pywal json")

    # Parse Args
    args = parser.parse_args()

    # Check bad args combination
    if args.input is not None and args.xrdb is True:
        print('You cannot use both as same time pywal JSON will be used')
        args.xrdb = False

    if args.input is not None:
        wal_file = args.input[0]
    elif args.xrdb is False:
        # Get the last pywal generated JSON
        home = os.path.expanduser("~")
        wal_file = max(glob.glob(home + '/.cache/wal/schemes/*'), key=os.path.getctime)

    status_file = args.config

    wanted_colors = {}
    if args.xrdb is False:
        # Open pywal JSON and store it in a Dict
        with open(wal_file, "r") as f:
            wanted_colors = json.load(f)
    else:
        # Use xrdb colors
        x = subprocess.run(['xrdb', '-query'], stdout=subprocess.PIPE)
        lines = x.stdout.decode().split('\n')
        for line in filter(lambda l : l.startswith('*'), lines):
            prop, _, value = line.partition(':\t')
            wanted_colors[prop] = value

    # Check if we need to delete pywal JSON
    if args.delete is True:
        if os.path.exists(wal_file):
            os.remove(wal_file)

    # Open i3status-rust config file
    # And store it in a list
    status_lines = []
    with open(status_file, "r") as f:
        # Check if we need to backup file
        if args.backup is True:
            with open(status_file + '.old', "w") as f1:
                for line in f:
                    f1.write(line)
        for line in f:
            status_lines.append(line)

    # Check if i3status-rust config file contains 'theme.overrides' block
    # If don't add this block and customizable options
    if '[theme.overrides]\n' not in status_lines:
        status_lines.append("\n[theme.overrides]\n")
        for elem in custom_colors.keys():
            status_lines.append(elem)

    # Find relevant lines
    position_dict = {}
    i = 0
    for line in status_lines:
        for elem in custom_colors.keys():
            if elem in line:
                position_dict.update({elem: i})
        i += 1

    # Replace wanted lines
    for opt, pos in position_dict.items():
        for opt2, Xcolor in custom_colors.items():
            if opt == opt2:
                if args.xrdb is False:
                    status_lines[pos] = opt + " = \"" \
                                    + wanted_colors['colors'][Xcolor] + "\"\n"
                else:
                    status_lines[pos] = opt + " = \"" \
                                    + wanted_colors['*' + Xcolor] + "\"\n"
                break

    # Save newly created status.toml
    with open(status_file, "w") as f3:
        for line in status_lines:
            f3.write(line)

    exit()


if __name__ == "__main__":
    main()
